# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Album {
  SongInAlbum: SongInAlbum
  coverUrl: String
  creationDate: Timestamp!
  deletionDate: Timestamp!
  id: Int!
  incomplete: Boolean!
  name: String!
  sortOrder: String!
  updatedOn: Timestamp!
}

type Artist {
  ArtistOfAlbum: ArtistOfAlbum
  ArtistOfSong: ArtistOfSong
  creationDate: Timestamp!
  id: Int!
  incomplete: Boolean!
  mainPictureUrl: String
  name: String!
  sortOrder: String!
  type: String!
  updatedOn: Timestamp!
  vocaDbJson: JSONObject!
}

type ArtistOfAlbum {
  artistOfAlbumId: Int!
  categories: String!
  effectiveRoles: [String!]!
  roles: [String!]!
}

type ArtistOfSong {
  artistRoles: [String!]!
  categories: [String!]!
  creationDate: Timestamp!
  customName: String
  isSupport: Boolean!
  updatedOn: Timestamp!
  vocaDbId: Int
}

type FileInPlaylist {
  creationDate: Timestamp!
  id: Int!
  sortOrder: Int!
  updatedOn: Timestamp!
}

"""Foo is not foolish."""
type Foo {
  """Not a value to drink."""
  bar: Int!

  """Name of the foo."""
  name: String!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""A music file in the jukebox."""
type MusicFile {
  FileInPlaylist: FileInPlaylist

  """ID of corresponding album in database."""
  albumId: Int

  """Album of the track stored in file."""
  albumName: String

  """Sort order key of album of the track stored in file."""
  albumSortOrder: String

  """Artist of the track stored in file."""
  artistName: String

  """Sort order key of artist of the track stored in file."""
  artistSortOrder: String
  creationDate: Timestamp!

  """Duration of the song in seconds."""
  duration: Float!

  """Size of file in bytes."""
  fileSize: Int!

  """If the file has an embedded cover art."""
  hasCover: Boolean!

  """If the file is accompanied with a lyrics file."""
  hasLyrics: Boolean!

  """MD5 of the file."""
  hash: String!

  """File ID in database."""
  id: Int!

  """If this entry needs review."""
  needReview: Boolean!

  """Local path to the song."""
  path: String!

  """ID of corresponding song in database."""
  songId: Int

  """Name of the track stored in file."""
  trackName: String

  """Sort order key of name of the track stored in file."""
  trackSortOrder: String
  updatedOn: Timestamp!
}

"""A playlist of music files."""
type Playlist {
  """Name of the playlist."""
  name: String!

  """Slug of the playlist."""
  slug: ID!
}

type Query {
  currentUser: User
  foo: Foo!
  foos: [Foo!]!
  hash(plaintext: String!): String!
  startALengthyTask(sessionId: String!): [String!]!
}

type Song {
  SongInAlbum: SongInAlbum
  coverUrl: String
  creationDate: Timestamp!
  id: Int!
  incomplete: Boolean!
  name: String!
  originalId: Int
  sortOrder: String!
  updatedOn: Timestamp!
  vocaDbJson: JSONObject!
}

type SongInAlbum {
  creationDate: Timestamp!
  diskNumber: Int
  name: String
  trackNumber: Int
  updatedOn: Timestamp!
  vocaDbId: Int
}

type Subscription {
  aLengthyTask(sessionId: String!): String
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type User {
  creationDate: Timestamp!
  displayName: String!
  email: String!
  emailMD5: String!
  id: Int!
  role: String!
  username: String!
}

type VideoFile {
  id: Int!
}
